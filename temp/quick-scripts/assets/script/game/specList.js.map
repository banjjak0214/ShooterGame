{"version":3,"sources":["specList.js"],"names":["GameData","require","blockData","cc","Class","extends","Component","properties","blockPrefab","Prefab","onLoad","_maxGroupCount","_blockVal","start","startLine","node","parent","height","firstLine","centerLine","secondLine","actorLine","passedCenter","passedActor","groupData","groupCount","bNum","resetGroupData","on","addBlockBar","update","dt","endPos","y","emit","yPos","groupBar","x","isBlock","block","blockPool","size","get","instantiate","setPosition","width","active","isMin","parseInt","Math","random","maxVal","label","getComponent","init","color","getBlockColor","max","val","rate","ceil","ran","single","couple","setMaxGroupCount","count","setVal"],"mappings":"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","file":"specList.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\game","sourcesContent":["// var CHD = require(\"commonHandler\");\r\nvar GameData = require(\"gameData\");\r\nvar blockData = require(\"blockData\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        blockPrefab:cc.Prefab\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this._maxGroupCount = 1;\r\n        this._blockVal = 0;\r\n    },\r\n\r\n    start () {\r\n        this.startLine = this.node.parent.height/2;\r\n        this.firstLine = GameData.centerLine;\r\n        this.secondLine = GameData.actorLine+150;\r\n        this.passedCenter = false;\r\n        this.passedActor = false;\r\n\r\n        this.groupData = [];\r\n        this.groupCount = 0;\r\n        this.bNum = 0;\r\n        \r\n        this.resetGroupData();\r\n        this.node.on('resetData', this.resetGroupData, this);\r\n        this.node.on('addNewBar', this.addBlockBar, this);\r\n    },\r\n\r\n    update (dt) {\r\n        var endPos = this.node.y + this.node.height;\r\n        if(this.groupCount == this._maxGroupCount && this.bNum == 19){\r\n            if(endPos < this.firstLine && !this.passedCenter){\r\n                this.passedCenter = true;\r\n                this.node.parent.emit('passedCenterLine');\r\n            }\r\n            \r\n            if(endPos < this.secondLine && !this.passedActor){\r\n                this.passedActor = true;\r\n                this.node.parent.emit('passedActorLine');\r\n            }\r\n        }else{\r\n            if(endPos < this.startLine){\r\n                // this.node.emit('addNewBar');\r\n                this.addBlockBar();\r\n            }\r\n        }\r\n    },\r\n    addBlockBar(){\r\n        var yPos = 20*(this.groupCount-1) + this.bNum;\r\n        let groupBar = this.groupData[this.bNum];\r\n        for(var x = 0; x < 5; x++){\r\n            \r\n            let isBlock = groupBar[x];\r\n            if(isBlock){\r\n                \r\n                let block = null;\r\n                if (GameData.blockPool.size() > 0) {\r\n                    block = GameData.blockPool.get();\r\n                } else {\r\n                    block = cc.instantiate(this.blockPrefab);\r\n                }\r\n                \r\n                block.parent = this.node;\r\n                block.setPosition((x+0.5)*block.width, yPos*150);\r\n                block.active = true;\r\n\r\n                let isMin = parseInt(40*Math.random());\r\n\r\n                let maxVal = 9*this._blockVal +150;\r\n                                \r\n                if(isMin === 1){\r\n                    let label = parseInt(0.75*maxVal);\r\n                    block.getComponent('block').init(label, 97, 193, 7);\r\n                }else{\r\n                    let label = parseInt(maxVal - 0.25*maxVal* Math.random());\r\n                    let color = this.getBlockColor(maxVal, label);//new cc.Color(205, 25, 25);\r\n\r\n                    block.getComponent('block').init(label, color[0], color[1], color[2]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(this.bNum == 19){\r\n            this.node.emit('resetData');\r\n            this.bNum = 0;\r\n        }else{\r\n            this.bNum += 1;\r\n        }\r\n        \r\n        this.node.height += 150;\r\n    },\r\n    getBlockColor(max, val){\r\n        let rate = Math.ceil(10*val/max)/10;\r\n        return [255-rate*50, 200 - rate*175, rate*25];\r\n    },\r\n    resetGroupData(){\r\n        if(this._maxGroupCount === 1){\r\n            var ran = parseInt(17*Math.random());\r\n            this.groupData = blockData.single[ran];\r\n        }else{\r\n            var ran = parseInt(9*Math.random());\r\n            this.groupData = blockData.couple[ran];\r\n        }\r\n        \r\n        this.groupCount += 1;\r\n    },\r\n    setMaxGroupCount(count){\r\n        this._maxGroupCount = count;\r\n    },\r\n    setVal(val){\r\n        this._blockVal = val;\r\n    },\r\n    // exploreAll(){\r\n    //     let childs = this.node.children;\r\n    //     for(let x in childs){\r\n    //         if(childs[x].name == 'block'){\r\n    //             childs[x].getComponent('block').explore();\r\n    //         }\r\n    //     }\r\n    // }\r\n});"]}